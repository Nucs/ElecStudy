//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Electronics.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ElectronicsEntities : DbContext
    {
        public ElectronicsEntities()
            : base("name=ElectronicsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<Nullable<int>> DeleteArticles(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteArticles", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteAuthors(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteAuthors", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteSubjects(Nullable<int> iD, Nullable<int> parentID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteSubjects", iDParameter, parentIDParameter);
        }
    
        public virtual ObjectResult<Article> GetArticles(Nullable<int> iD, string title, string description, string mainText, Nullable<int> authorID, Nullable<int> subjectID, Nullable<int> top)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var mainTextParameter = mainText != null ?
                new ObjectParameter("MainText", mainText) :
                new ObjectParameter("MainText", typeof(string));
    
            var authorIDParameter = authorID.HasValue ?
                new ObjectParameter("AuthorID", authorID) :
                new ObjectParameter("AuthorID", typeof(int));
    
            var subjectIDParameter = subjectID.HasValue ?
                new ObjectParameter("SubjectID", subjectID) :
                new ObjectParameter("SubjectID", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("Top", top) :
                new ObjectParameter("Top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Article>("GetArticles", iDParameter, titleParameter, descriptionParameter, mainTextParameter, authorIDParameter, subjectIDParameter, topParameter);
        }
    
        public virtual ObjectResult<Author> GetAuthors(Nullable<int> iD, string name, string description, string username, string password)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Author>("GetAuthors", iDParameter, nameParameter, descriptionParameter, usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Subject> GetSubjects(Nullable<int> iD, Nullable<int> parentID, string name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Subject>("GetSubjects", iDParameter, parentIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetArticle(Nullable<int> iD, string title, string mainText, string filePath, string description, string authorsIdCsv, string subjectsIdCsv, Nullable<bool> isImageOnly, Nullable<bool> isTextOnly)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var mainTextParameter = mainText != null ?
                new ObjectParameter("MainText", mainText) :
                new ObjectParameter("MainText", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var authorsIdCsvParameter = authorsIdCsv != null ?
                new ObjectParameter("AuthorsIdCsv", authorsIdCsv) :
                new ObjectParameter("AuthorsIdCsv", typeof(string));
    
            var subjectsIdCsvParameter = subjectsIdCsv != null ?
                new ObjectParameter("SubjectsIdCsv", subjectsIdCsv) :
                new ObjectParameter("SubjectsIdCsv", typeof(string));
    
            var isImageOnlyParameter = isImageOnly.HasValue ?
                new ObjectParameter("IsImageOnly", isImageOnly) :
                new ObjectParameter("IsImageOnly", typeof(bool));
    
            var isTextOnlyParameter = isTextOnly.HasValue ?
                new ObjectParameter("IsTextOnly", isTextOnly) :
                new ObjectParameter("IsTextOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetArticle", iDParameter, titleParameter, mainTextParameter, filePathParameter, descriptionParameter, authorsIdCsvParameter, subjectsIdCsvParameter, isImageOnlyParameter, isTextOnlyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetAuthor(Nullable<int> iD, string name, string filePath, string description, string username, string password)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetAuthor", iDParameter, nameParameter, filePathParameter, descriptionParameter, usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetSubject(Nullable<int> iD, Nullable<int> parentID, string name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetSubject", iDParameter, parentIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteNews(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteNews", iDParameter);
        }
    
        public virtual ObjectResult<News> GetNews(Nullable<int> iD, string title, string content, Nullable<int> top)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("Top", top) :
                new ObjectParameter("Top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<News>("GetNews", iDParameter, titleParameter, contentParameter, topParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SetNews(Nullable<int> iD, string title, string content)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SetNews", iDParameter, titleParameter, contentParameter);
        }
    
        public virtual ObjectResult<ArticleAuthorPair> GetArticlesAuthors(Nullable<int> articleID, Nullable<int> authorID)
        {
            var articleIDParameter = articleID.HasValue ?
                new ObjectParameter("ArticleID", articleID) :
                new ObjectParameter("ArticleID", typeof(int));
    
            var authorIDParameter = authorID.HasValue ?
                new ObjectParameter("AuthorID", authorID) :
                new ObjectParameter("AuthorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArticleAuthorPair>("GetArticlesAuthors", articleIDParameter, authorIDParameter);
        }
    
        public virtual ObjectResult<ArticleSubjectPair> GetArticlesSubjects(Nullable<int> articleID, Nullable<int> subjectID)
        {
            var articleIDParameter = articleID.HasValue ?
                new ObjectParameter("ArticleID", articleID) :
                new ObjectParameter("ArticleID", typeof(int));
    
            var subjectIDParameter = subjectID.HasValue ?
                new ObjectParameter("SubjectID", subjectID) :
                new ObjectParameter("SubjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArticleSubjectPair>("GetArticlesSubjects", articleIDParameter, subjectIDParameter);
        }
    }
}
